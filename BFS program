from collections import deque

# Graph class
class Graph:
    def __init__(self):
        self.graph = {}

    # Function to add an edge to the graph
    def add_edge(self, v, w):
        if v in self.graph:
            self.graph[v].append(w)
        else:
            self.graph[v] = [w]

    # BFS traversal
    def bfs_traversal(self, start):
        visited = set()  # Set to track visited nodes
        queue = deque()  # Queue for BFS

        visited.add(start)
        queue.append(start)

        while queue:
            vertex = queue.popleft()
            print(vertex, end=' ')

            if vertex in self.graph:
                for neighbor in self.graph[vertex]:
                    if neighbor not in visited:
                        visited.add(neighbor)
                        queue.append(neighbor)


# Example usage
if __name__ == '__main__':
    # Create a graph
    g = Graph()
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    g.add_edge('B', 'D')
    g.add_edge('B', 'E')
    g.add_edge('C', 'F')
    g.add_edge('D', 'G')

    print('BFS traversal starting from vertex A:')
    g.bfs_traversal('A')
