# DFS implementation using recursion

# Graph class
class Graph:
    def __init__(self):
        self.graph = {}

    # Function to add an edge to the graph
    def add_edge(self, v, w):
        if v in self.graph:
            self.graph[v].append(w)
        else:
            self.graph[v] = [w]

    # Recursive function for DFS
    def dfs(self, v, visited):
        # Mark the current node as visited
        visited.add(v)
        print(v, end=' ')

        # Recur for all the adjacent vertices
        if v in self.graph:
            for neighbor in self.graph[v]:
                if neighbor not in visited:
                    self.dfs(neighbor, visited)

    # DFS traversal
    def dfs_traversal(self, start):
        visited = set()  # Set to track visited nodes
        self.dfs(start, visited)


# Example usage
if __name__ == '__main__':
    # Create a graph
    g = Graph()
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    g.add_edge('B', 'D')
    g.add_edge('B', 'E')
    g.add_edge('C', 'F')
    g.add_edge('D', 'G')

    print('DFS traversal starting from vertex A:')
    g.dfs_traversal('A')
